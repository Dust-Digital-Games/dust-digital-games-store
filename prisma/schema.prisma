// Learn more about this Prisma Schema file in the docs: https://pris.ly/d/prisma-schema
// After making changes in this schema file run `npx prisma generate` to generate the new Prisma Client JS.

// https://github.com/prisma/prisma/issues/4246
// As of July 2023, Prisma does not let the user decide 
// if we want to skip the SELECT statement after an INSERT.
// This behavior is common in ORM's but theres always a way to customize it.
// The issue is being worked on but its important to note
// just in case we ran into optimization issues in the future.

// Also cant multiline comments ☠️

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id              Int    @id @default(autoincrement())
  contractAddress String
  game_name       String
  description     String
  image           String
  download_link   String
  rating          Decimal? @db.Decimal(2,1)
  categories Category[]
}

model Category {
  id            Int     @id @default(autoincrement())
  category_name String
  description   String
  image         String?
  games         Game[]
}

// From this point on, the schema refers to the user's account and session management.
// Due to a bug in NextJS, we need to implement some extra tables to 'trick' the system into thinking we use JWT
// because it doesn't support custom metamask authentication providers yet. 

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  publicAddress    String?           @unique // Added to enable crypto authentication
  accounts         Account[]
  sessions         Session[]
  cryptoLoginNonce CryptoLoginNonce?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Added for crypto authentication

model CryptoLoginNonce {
  userId  String   @unique
  nonce   String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
